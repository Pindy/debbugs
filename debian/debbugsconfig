#!/usr/bin/perl
# debbugsconfig: copies debbugs configuration files from templates, and
#                creates documentation in HTML and text

use POSIX qw(strftime);

if (@ARGV) {
  print STDOUT <<EOF;
Usage: $0

debbugsconfig will copy basic debbugs configuration files from templates
if they don't exist.

It will also create BTS user documentation in HTML and text.

EOF
  exit(0);
}

$gConfigDir = "/etc/debbugs" if (!defined($gConfigDir));
&template("config");
require "$gConfigDir/config";
unshift @INC, $gConfigDir;

&template("text");
require "text";

&template("nextnumber");

my $dtime = strftime "%a, %e %b %Y %T UTC", localtime;
$gHTMLTail =~ s/SUBSTITUTE_DTIME/$dtime/;

require('html/index.html.in');
&writefiles ('index', '', $gIndexHtml );
require('html/Access.html.in');
&writefiles ('Access', 'bug-log-access', $gAccessHtml );
require('html/Developer.html.in');
&writefiles ('Developer', 'bug-maint-info', $gDeveloperHtml );
require('html/Reporting.html.in');
&writefiles ('Reporting', 'bug-reporting', $gReportingHtml );
require('html/server-control.html.in');
&writefiles ('server-control', 'bug-maint-mailcontrol', $gControlHtml );
require('html/server-refcard.html.in');
&writefiles ('server-refcard', 'bug-mailserver-refcard', $gRefcardHtml );
require('html/server-request.html.in');
&writefiles ('server-request', 'bug-log-mailserver', $gRequestHtml );

exit(0);

# -------------------------------------------------------------------------- #

sub template {
  my ($name) = @_;
  if (! -f "$gConfigDir/$name") {
  system("cp /usr/share/doc/debbugs/examples/$name $gConfigDir/$name") == 0 ||
	die "$!";
  print "created $gConfigDir/$name from template.";
  }
} 

sub writefiles {
  local ($html, $text, $name) = @_;
# first HTML
  unlink("$gWebDir/$html.html");
  open(DEST, ">$gWebDir/$html.html") || die "$gWebDir/$html.html: $!";
  print DEST $name;
  close(DEST);
  print "wrote $gWebDir/$html.html\n";
# now text
  return if ($text eq ""); # for index.html
# This should be done with pipes instead of a temporary files, but lynx
# doesn't read HTML from stdin :/
  open(DEST, ">$gDocDir/$text.html") || die "$gDocDir/$text.html: $!";
  $name =~ s,\nOther pages:\n.*?<hr>,,si;
  print DEST $name;
  close(DEST);
  unlink("$gDocDir/$text.txt");
  $ENV{'HOME'} = "/dev/null";
  $ENV{'TERM'} = "linux";
  system ("lynx -nolist -dump -cfg=$gConfigDir/html/lynx-cfg $gDocDir/$text.html > $gDocDir/$text.txt") == 0 ||
    die "unable to write $gDocDir/$text.txt\n";
  unlink("$gDocDir/$text.html") || die "can't remove temporary file $gDocDir/$text.html: $!";
  print "wrote $gDocDir/$text.txt\n";
}
